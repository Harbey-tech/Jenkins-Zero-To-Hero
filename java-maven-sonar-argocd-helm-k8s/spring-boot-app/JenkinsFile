pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "harbey271/myapp-java17:latest"
        SONAR_HOST_URL = "http://your-sonarqube-server:9000"      // Change to your SonarQube URL
        SONAR_AUTH_TOKEN = credentials('sonarqube-token-id')     // Jenkins credential ID for SonarQube token
        DOCKERHUB_CREDENTIALS = 'dockerhub-cred-id'              // Jenkins credential ID for Docker Hub
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build with Maven') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {  // 'SonarQube' = Jenkins SonarQube server name
                    sh "mvn sonar:sonar -Dsonar.host.url=${SONAR_HOST_URL} -Dsonar.login=${SONAR_AUTH_TOKEN}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build(DOCKER_IMAGE)
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', DOCKERHUB_CREDENTIALS) {
                        docker.image(DOCKER_IMAGE).push('latest')
                    }
                }
            }
        }

        stage('Run Application Container') {
            steps {
                script {
                    docker.image(DOCKER_IMAGE).inside {
                        // Run any verification command, like checking Java version or curl the app endpoint
                        sh 'java -version'
                        // Or curl localhost:8080 if app exposes HTTP on that port (adjust as needed)
                        // sh 'curl http://localhost:8080/actuator/health'
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean workspace after build
        }
    }
}
